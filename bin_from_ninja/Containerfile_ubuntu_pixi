FROM docker.io/library/ubuntu:22.04

################
# Install pixi #
################

WORKDIR /app

# Remark: To install `pixi` on your PC, if `cargo` is already installed, then you
#   can call `cargo install pixi --version 0.13.0 --locked` instead.
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends ca-certificates curl; \
    rm -rf /var/lib/apt/lists/*; \
    curl -fsSL https://pixi.sh/install.sh -o install.sh; \
    PIXI_VERSION=v0.13.0 /bin/bash install.sh; \
    rm install.sh

# Remark: On your PC, in your `.bashrc`, add `export PATH="$PATH:$HOME/.pixi/bin"`.
ENV PATH="$PATH:/root/.pixi/bin"

########################################################################
# Compile and check local Rust programs and deploy them to "$HOME/bin" #
########################################################################

COPY pixi.toml pixi.lock /app/
RUN set -eux; \
    # Remark: `pixi run all` already does `pixi install` if needed. But it is better
    #   to have the result in a cache before `COPY . /app/`.
    pixi install; \
    apt-get update; \
    # Remark: `synchronize_backup` and `synchronize_partially` call `rsync`.
    apt-get install -y --no-install-recommends rsync; \
    rm -rf /var/lib/apt/lists/*
COPY . /app/
RUN pixi run all

# Remark: On your PC, in your `.bashrc`, add `export PATH="$PATH:$HOME/bin"` so that
#   you can use `synchronize_backup`, `synchronize_partially`, etc.
ENV PATH="$PATH:/root/bin"

CMD ["/bin/bash"]
